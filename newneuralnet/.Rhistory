sample_entries <- sample( 1 : nrow(train), size = nrow(train), replace = FALSE )
# creating the sample
train <- train[sample_entries,]
str(train)
train$Sex = as.numeric(train$Sex)
train$Embarked = as.numeric(train$Embarked)
makeTitanicReport = function(hidden, seed, threshold){
t.accuracy.out = rep(0, hidden)
s.accuracy.out = rep(0, hidden)
r.accuracy.out = rep(0, hidden)
n.accuracy.out = rep(0, hidden)
t.steps = rep(0, hidden)
s.steps = rep(0, hidden)
r.steps = rep(0, hidden)
n.steps = rep(0, hidden)
t.error.in = rep(0, hidden)
s.error.in = rep(0, hidden)
r.error.in = rep(0, hidden)
n.error.in = rep(0, hidden)
for(i in 1 : hidden){
set.seed(seed)
#=================================================================================================
tan.net <- neuralnet(Survived ~ Pclass + Sex + SibSp +
Parch + Fare + Embarked, hidden = rep(3, i),
act.fct = "tanh", linear.output=FALSE,
threshold = threshold,
lifesign = "full", stepmax = 10 ^ 7,
data = train[1:500,])
train[1,-2]
t.prediction <- compute(tan.net, train[501:891,-c(1,2,4,6,9,11)])$net.result
t.result = rep(0,391)
t.result[t.prediction >= 0.5] = 1
#tresult
t.truth = table(t.result, train[501:891, 2])
t.accuracy.out[i] = (t.truth[1] + t.truth[4]) / sum(t.truth)
#sum(tresult == train[501:891, 2]) / sum(ttruth)
t.steps[i] = tan.net$result.matrix[3]
t.error.in[i] = tan.net$result.matrix[1]
#=================================================================================================
set.seed(seed)
#=================================================================================================
sig.net <- neuralnet(Survived ~ Pclass + Sex + SibSp +
Parch + Fare + Embarked, hidden = rep(3, i),
act.fct = "logistic", linear.output=FALSE,
lifesign = "full", stepmax = 10 ^ 8,
threshold = threshold,
data = train[1:500,])
train[1,-2]
s.prediction <- compute(sig.net, train[501:891,-c(1,2,4,6,9,11)])$net.result
s.result = rep(0,391)
s.result[s.prediction >= 0.5] = 1
#sresult
s.truth = table(s.result, train[501:891, 2])
s.accuracy.out[i] = (s.truth[1] + s.truth[4]) / sum(s.truth)
#sum(sresult == train[501:891, 2]) / sum(struth)
s.steps[i] = sig.net$result.matrix[3]
s.error.in[i] = sig.net$result.matrix[1]
#================================================================================================
set.seed(seed)
#================================================================================================
source("neuralnet/R/neuralnetwork1.R")
rec.net <- neuralnetwork1(Survived ~ Pclass + Sex + SibSp +
Parch + Fare + Embarked, hidden = rep(3, i),
act.fct = "logistic", linear.output=FALSE,
threshold = threshold, stepmax = 10 ^ 8, lifesign = "full",
lifesign.step = 1000,
data = train[1:500,])
r.prediction <- compute(rec.net, train[501:891,-c(1,2,4,6,9,11)])$net.result
r.result = rep(0,391)
r.result[r.prediction >= 0.5] = 1
r.truth = table(r.result, train[501:891, 2])
r.accuracy.out[i] = (r.truth[1] + r.truth[4]) / sum(r.truth)
#sum(result == train[501:891, 2]) / sum(truth)
r.steps[i] = rec.net$result.matrix[3]
r.error.in[i] = rec.net$result.matrix[1]
set.seed(seed)
#================================================================================================
source("neuralnet/R/neuralnetwork1.R")
new.net <- neuralnetwork1(Survived ~ Pclass + Sex + SibSp +
Parch + Fare + Embarked, hidden = rep(3, i),
act.fct = "tanh", linear.output=FALSE,
threshold = threshold, stepmax = 10 ^ 7, lifesign = "full",
lifesign.step = 1000,
data = train[1:500,])
train[1,-2]
n.prediction <- compute(new.net, train[501:891,-c(1,2,4,6,9,11)])$net.result
n.result = rep(0,391)
n.result[n.prediction >= 0.5] = 1
n.truth = table(n.result, train[501:891, 2])
n.accuracy.out[i] = (n.truth[1] + n.truth[4]) / sum(n.truth)
#sum(result == train[501:891, 2]) / sum(truth)
n.steps[i] = new.net$result.matrix[3]
n.error.in[i] = new.net$result.matrix[1]
#=================================================================================================
}
tan.results = list(c("Accuracy" = 100 * round(t.accuracy.out, 4),
"Steps" = t.steps,
"ErrorIn" = round(t.error.in, 4)))
sig.results = list(c("Accuracy" = 100 * round(s.accuracy.out, 4),
"Steps" = s.steps,
"ErrorIn" = round(s.error.in, 4)))
rec.results = list(c("Accuracy" = 100 * round(r.accuracy.out, 4),
"Steps" = r.steps,
"ErrorIn" = round(r.error.in, 4)))
new.results = list(c("Accuracy" = 100 * round(n.accuracy.out, 4),
"Steps" = round(n.steps),
"ErrorIn" = round(n.error.in, 4)))
return(list(c("tan" = tan.results,
"sig" = sig.results,
"rec" = rec.results,
"new" = new.results
)
)
)
}
seed = 1111
titanic <- makeTitanicReport(hidden = 4, seed = seed, threshold = 0.1)
source('~/Desktop/University of Auckland/COMPSCI760/NEURALNET/research_code.R', echo=TRUE)
source('~/Desktop/University of Auckland/COMPSCI760/NEURALNET/research_code.R', echo=TRUE)
source('~/Desktop/University of Auckland/COMPSCI760/NEURALNET/research_code.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
titanic
source('~/Desktop/University of Auckland/COMPSCI760/NEURALNET/research_code.R', echo=TRUE)
source('~/Desktop/University of Auckland/COMPSCI760/NEURALNET/research_code.R', echo=TRUE)
source('~/Desktop/University of Auckland/COMPSCI760/NEURALNET/research_code.R', echo=TRUE)
titanic
sink("titanic_05.txt")
titanic
sink()
dim(digi)
dim(digit)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
titanic
source('~/Desktop/University of Auckland/COMPSCI760/NEURALNET/research_code.R', echo=TRUE)
titanic
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
t.table
source('~/Desktop/University of Auckland/COMPSCI760/NEURALNET/research_code_digit copy.R', echo=TRUE)
str(digit)
# MAKE A SAMPLE
# create sample observation indices
m = 1000
sample_entries <- sample( 1 : nrow(digit), size = m, replace = FALSE )
# create the sample
digit.sample <- digit[sample_entries,] # m number of observations
# DIVIDE THE SAMPLE
# create train and test set indices
split.at <- round(0.7 * m)
m.train = 1 : split.at
m.test = (split.at + 1) : m
# create the training set
digit.train <- digit.sample[m.train,] # 70% of observations
# create the test set
digit.test <- digit.sample[m.test,] # 30% of observations
######################
# Formula for models #
######################
# creating formula for the model
covariates <- colnames(digit)[-1]
formula <- as.formula(paste("label ~ ", paste(covariates, collapse = "+")))
################
# New function #
################
makeNewReport <- function (m, hidden, threshold, fct = "logistic"){
#source("neuralnet/R/neuralnetwork.R")
new.duration = rep(0, hidden)
new.in.accuracy = rep(0, hidden)
new.out.accuracy = rep(0, hidden)
new.in.error = rep(0, hidden)
new.steps = rep(0, hidden)
for(i in 1:hidden){
new.duration[i] <- proc.time()[3]
new.net <- neuralnetwork1(formula, hidden = rep(2, i), lifesign = "full", lifesign.step = 1000,
act.fct = fct, threshold = threshold, stepmax = 2000000000,
# algorithm = "backprop", learningrate = 0.1,
linear.output = TRUE,
data = digit.train)
new.duration[i] <- proc.time()[3] - new.duration[i]
# in-sample accuracy
new.train.prediction <- compute(new.net, digit.train[, -1])$net.result
new.train.prediction = round(new.train.prediction)
new.in.accuracy[i] = sum(new.train.prediction == digit.train[, 1]) / nrow(digit.train)
# out-of-sample accuracy
new.test.prediction <- compute(new.net, digit.test[, -1])$net.result
new.test.prediction = round(new.test.prediction)
new.out.accuracy[i] = sum(new.test.prediction == digit.test[, 1]) / nrow(digit.test)
new.in.error[i] = new.net$result.matrix[1]
new.steps[i] = new.net$result.matrix[3]
}
return(list("steps" = new.steps,
"time" = new.duration,
"in.accuracy" = 100 * round(new.in.accuracy, 4),
# "in.error" = new.in.error,
"out.accuracy" = 100 * round(new.out.accuracy, 4))
)
}
################################
# Hyperbolic tangent & Sigmoid #
################################
makeOldReport <- function (m, hidden, fct = "logistic"){
old.duration = rep(0, hidden)
old.in.accuracy = rep(0, hidden)
old.out.accuracy = rep(0, hidden)
old.in.error = rep(0, hidden)
old.steps = rep(0, hidden)
for(i in 1:hidden){
old.duration[i] <- proc.time()[3]
old.net <- neuralnet(formula, hidden = rep(, i), lifesign = "full", lifesign.step = 1000,
act.fct = fct, linear.output = FALSE, threshold = 0.00001,
stepmax = 2000000000, data = digit.train)
old.duration[i] <- proc.time()[3] - old.duration[i]
# in-sample accuracy
old.train.prediction <- compute(old.net, digit.train[, -1])$net.result
old.train.prediction = round(old.train.prediction)
old.in.accuracy[i] = sum(old.train.prediction == digit.train[, 1]) / nrow(digit.train)
# out-of-sample accuracy
otest.prediction <- compute(old.net, digit.test[, -1])$net.result
otest.prediction = round(otest.prediction)
old.out.accuracy[i] = sum(otest.prediction == digit.test[, 1]) / nrow(digit.test)
old.in.error[i] = old.net$result.matrix[1]
old.steps[i] = old.net$result.matrix[3]
}
return(list("steps" = old.steps,
"time" = old.duration,
"in.accuracy" = 100 * round(old.in.accuracy, 4),
#"in.error" = old.in.error,
"out.accuracy" = 100 * round(old.out.accuracy, 4)
))
}
hidden = 5
#steps = 20000
library(parallel)
source("neuralnet/R/neuralnetwork1.R")
i = 24
set.seed(i)
lin <- makeNewReport(m = m, hidden = hidden, threshold = 0.001, "logistic")
sig <- makeOldReport(m = m, hidden = hidden, "logistic")
str(digit)
# MAKE A SAMPLE
# create sample observation indices
m = 1000
sample_entries <- sample( 1 : nrow(digit), size = m, replace = FALSE )
# create the sample
digit.sample <- digit[sample_entries,] # m number of observations
# DIVIDE THE SAMPLE
# create train and test set indices
split.at <- round(0.7 * m)
m.train = 1 : split.at
m.test = (split.at + 1) : m
# create the training set
digit.train <- digit.sample[m.train,] # 70% of observations
# create the test set
digit.test <- digit.sample[m.test,] # 30% of observations
######################
# Formula for models #
######################
# creating formula for the model
covariates <- colnames(digit)[-1]
formula <- as.formula(paste("label ~ ", paste(covariates, collapse = "+")))
################
# New function #
################
makeNewReport <- function (m, hidden, threshold, fct = "logistic"){
#source("neuralnet/R/neuralnetwork.R")
new.duration = rep(0, hidden)
new.in.accuracy = rep(0, hidden)
new.out.accuracy = rep(0, hidden)
new.in.error = rep(0, hidden)
new.steps = rep(0, hidden)
for(i in 1:hidden){
new.duration[i] <- proc.time()[3]
new.net <- neuralnetwork1(formula, hidden = rep(100, i), lifesign = "full", lifesign.step = 1000,
act.fct = fct, threshold = threshold, stepmax = 2000000000,
# algorithm = "backprop", learningrate = 0.1,
linear.output = TRUE,
data = digit.train)
new.duration[i] <- proc.time()[3] - new.duration[i]
# in-sample accuracy
new.train.prediction <- compute(new.net, digit.train[, -1])$net.result
new.train.prediction = round(new.train.prediction)
new.in.accuracy[i] = sum(new.train.prediction == digit.train[, 1]) / nrow(digit.train)
# out-of-sample accuracy
new.test.prediction <- compute(new.net, digit.test[, -1])$net.result
new.test.prediction = round(new.test.prediction)
new.out.accuracy[i] = sum(new.test.prediction == digit.test[, 1]) / nrow(digit.test)
new.in.error[i] = new.net$result.matrix[1]
new.steps[i] = new.net$result.matrix[3]
}
return(list("steps" = new.steps,
"time" = new.duration,
"in.accuracy" = 100 * round(new.in.accuracy, 4),
# "in.error" = new.in.error,
"out.accuracy" = 100 * round(new.out.accuracy, 4))
)
}
################################
# Hyperbolic tangent & Sigmoid #
################################
makeOldReport <- function (m, hidden, fct = "logistic"){
old.duration = rep(0, hidden)
old.in.accuracy = rep(0, hidden)
old.out.accuracy = rep(0, hidden)
old.in.error = rep(0, hidden)
old.steps = rep(0, hidden)
for(i in 1:hidden){
old.duration[i] <- proc.time()[3]
old.net <- neuralnet(formula, hidden = rep(100, i), lifesign = "full", lifesign.step = 1000,
act.fct = fct, linear.output = FALSE, threshold = 0.001,
stepmax = 2000000000, data = digit.train)
old.duration[i] <- proc.time()[3] - old.duration[i]
# in-sample accuracy
old.train.prediction <- compute(old.net, digit.train[, -1])$net.result
old.train.prediction = round(old.train.prediction)
old.in.accuracy[i] = sum(old.train.prediction == digit.train[, 1]) / nrow(digit.train)
# out-of-sample accuracy
otest.prediction <- compute(old.net, digit.test[, -1])$net.result
otest.prediction = round(otest.prediction)
old.out.accuracy[i] = sum(otest.prediction == digit.test[, 1]) / nrow(digit.test)
old.in.error[i] = old.net$result.matrix[1]
old.steps[i] = old.net$result.matrix[3]
}
return(list("steps" = old.steps,
"time" = old.duration,
"in.accuracy" = 100 * round(old.in.accuracy, 4),
#"in.error" = old.in.error,
"out.accuracy" = 100 * round(old.out.accuracy, 4)
))
}
hidden = 5
#steps = 20000
library(parallel)
source("neuralnet/R/neuralnetwork1.R")
i = 24
set.seed(i)
lin <- makeNewReport(m = m, hidden = hidden, threshold = 0.001, "logistic")
sig <- makeOldReport(m = m, hidden = hidden, "logistic")
sig
tan <- makeOldReport(m = m, hidden = hidden, "tanh")
makeOldReport <- function (m, hidden, fct = "logistic"){
old.duration = rep(0, hidden)
old.in.accuracy = rep(0, hidden)
old.out.accuracy = rep(0, hidden)
old.in.error = rep(0, hidden)
old.steps = rep(0, hidden)
for(i in 1:hidden){
old.duration[i] <- proc.time()[3]
old.net <- neuralnet(formula, hidden = rep(100, i), lifesign = "full", lifesign.step = 1000,
act.fct = fct, linear.output = FALSE, threshold = 0.000001,
stepmax = 2000000000, data = digit.train)
old.duration[i] <- proc.time()[3] - old.duration[i]
# in-sample accuracy
old.train.prediction <- compute(old.net, digit.train[, -1])$net.result
old.train.prediction = round(old.train.prediction)
old.in.accuracy[i] = sum(old.train.prediction == digit.train[, 1]) / nrow(digit.train)
# out-of-sample accuracy
otest.prediction <- compute(old.net, digit.test[, -1])$net.result
otest.prediction = round(otest.prediction)
old.out.accuracy[i] = sum(otest.prediction == digit.test[, 1]) / nrow(digit.test)
old.in.error[i] = old.net$result.matrix[1]
old.steps[i] = old.net$result.matrix[3]
}
return(list("steps" = old.steps,
"time" = old.duration,
"in.accuracy" = 100 * round(old.in.accuracy, 4),
#"in.error" = old.in.error,
"out.accuracy" = 100 * round(old.out.accuracy, 4)
))
}
sig <- makeOldReport(m = m, hidden = hidden, "logistic")
makeOldReport <- function (m, hidden, fct = "logistic"){
old.duration = rep(0, hidden)
old.in.accuracy = rep(0, hidden)
old.out.accuracy = rep(0, hidden)
old.in.error = rep(0, hidden)
old.steps = rep(0, hidden)
for(i in 1:hidden){
old.duration[i] <- proc.time()[3]
old.net <- neuralnet(formula, hidden = rep(2, i), lifesign = "full", lifesign.step = 1000,
act.fct = fct, linear.output = FALSE, threshold = 0.000001,
stepmax = 2000000000, data = digit.train)
old.duration[i] <- proc.time()[3] - old.duration[i]
# in-sample accuracy
old.train.prediction <- compute(old.net, digit.train[, -1])$net.result
old.train.prediction = round(old.train.prediction)
old.in.accuracy[i] = sum(old.train.prediction == digit.train[, 1]) / nrow(digit.train)
# out-of-sample accuracy
otest.prediction <- compute(old.net, digit.test[, -1])$net.result
otest.prediction = round(otest.prediction)
old.out.accuracy[i] = sum(otest.prediction == digit.test[, 1]) / nrow(digit.test)
old.in.error[i] = old.net$result.matrix[1]
old.steps[i] = old.net$result.matrix[3]
}
return(list("steps" = old.steps,
"time" = old.duration,
"in.accuracy" = 100 * round(old.in.accuracy, 4),
#"in.error" = old.in.error,
"out.accuracy" = 100 * round(old.out.accuracy, 4)
))
}
sig <- makeOldReport(m = m, hidden = hidden, "logistic")
sig
makeOldReport <- function (m, hidden, fct = "logistic"){
old.duration = rep(0, hidden)
old.in.accuracy = rep(0, hidden)
old.out.accuracy = rep(0, hidden)
old.in.error = rep(0, hidden)
old.steps = rep(0, hidden)
for(i in 1:hidden){
old.duration[i] <- proc.time()[3]
old.net <- neuralnet(formula, hidden = rep(2, i), lifesign = "full", lifesign.step = 1000,
act.fct = fct, linear.output = FALSE, threshold = 0.0000001,
stepmax = 2000000000, data = digit.train)
old.duration[i] <- proc.time()[3] - old.duration[i]
# in-sample accuracy
old.train.prediction <- compute(old.net, digit.train[, -1])$net.result
old.train.prediction = round(old.train.prediction)
old.in.accuracy[i] = sum(old.train.prediction == digit.train[, 1]) / nrow(digit.train)
# out-of-sample accuracy
otest.prediction <- compute(old.net, digit.test[, -1])$net.result
otest.prediction = round(otest.prediction)
old.out.accuracy[i] = sum(otest.prediction == digit.test[, 1]) / nrow(digit.test)
old.in.error[i] = old.net$result.matrix[1]
old.steps[i] = old.net$result.matrix[3]
}
return(list("steps" = old.steps,
"time" = old.duration,
"in.accuracy" = 100 * round(old.in.accuracy, 4),
#"in.error" = old.in.error,
"out.accuracy" = 100 * round(old.out.accuracy, 4)
))
}
sig <- makeOldReport(m = m, hidden = hidden, "logistic")
sig <- makeOldReport(m = m, hidden = hidden, "logistic")
sig
makeOldReport <- function (m, hidden, fct = "logistic"){
old.duration = rep(0, hidden)
old.in.accuracy = rep(0, hidden)
old.out.accuracy = rep(0, hidden)
old.in.error = rep(0, hidden)
old.steps = rep(0, hidden)
for(i in 1:hidden){
old.duration[i] <- proc.time()[3]
old.net <- neuralnet(formula, hidden = rep(2, i), lifesign = "full", lifesign.step = 1000,
act.fct = fct, linear.output = FALSE, threshold = 0.00000001,
stepmax = 2000000000, data = digit.train)
old.duration[i] <- proc.time()[3] - old.duration[i]
# in-sample accuracy
old.train.prediction <- compute(old.net, digit.train[, -1])$net.result
old.train.prediction = round(old.train.prediction)
old.in.accuracy[i] = sum(old.train.prediction == digit.train[, 1]) / nrow(digit.train)
# out-of-sample accuracy
otest.prediction <- compute(old.net, digit.test[, -1])$net.result
otest.prediction = round(otest.prediction)
old.out.accuracy[i] = sum(otest.prediction == digit.test[, 1]) / nrow(digit.test)
old.in.error[i] = old.net$result.matrix[1]
old.steps[i] = old.net$result.matrix[3]
}
return(list("steps" = old.steps,
"time" = old.duration,
"in.accuracy" = 100 * round(old.in.accuracy, 4),
#"in.error" = old.in.error,
"out.accuracy" = 100 * round(old.out.accuracy, 4)
))
}
hidden = 5
#steps = 20000
sig <- makeOldReport(m = m, hidden = hidden, "logistic")
makeOldReport <- function (m, hidden, fct = "logistic"){
old.duration = rep(0, hidden)
old.in.accuracy = rep(0, hidden)
old.out.accuracy = rep(0, hidden)
old.in.error = rep(0, hidden)
old.steps = rep(0, hidden)
for(i in 1:hidden){
old.duration[i] <- proc.time()[3]
old.net <- neuralnet(formula, hidden = rep(2, i), lifesign = "full", lifesign.step = 1000,
act.fct = fct, linear.output = FALSE, threshold = 0.00001,
stepmax = 2000000000, data = digit.train)
old.duration[i] <- proc.time()[3] - old.duration[i]
# in-sample accuracy
old.train.prediction <- compute(old.net, digit.train[, -1])$net.result
old.train.prediction = round(old.train.prediction)
old.in.accuracy[i] = sum(old.train.prediction == digit.train[, 1]) / nrow(digit.train)
# out-of-sample accuracy
otest.prediction <- compute(old.net, digit.test[, -1])$net.result
otest.prediction = round(otest.prediction)
old.out.accuracy[i] = sum(otest.prediction == digit.test[, 1]) / nrow(digit.test)
old.in.error[i] = old.net$result.matrix[1]
old.steps[i] = old.net$result.matrix[3]
}
return(list("steps" = old.steps,
"time" = old.duration,
"in.accuracy" = 100 * round(old.in.accuracy, 4),
#"in.error" = old.in.error,
"out.accuracy" = 100 * round(old.out.accuracy, 4)
))
}
hidden = 5
#steps = 20000
sig <- makeOldReport(m = m, hidden = hidden, "logistic")
sig
source('~/Desktop/University of Auckland/COMPSCI760/NEURALNET/research_code.R', echo=TRUE)
titanic
source('~/Desktop/University of Auckland/COMPSCI760/NEURALNET/research_code_digit copy.R', echo=TRUE)
source('~/Desktop/University of Auckland/COMPSCI760/NEURALNET/research_code.R', echo=TRUE)
titanic
source('~/Desktop/University of Auckland/COMPSCI760/NEURALNET/research_code.R', echo=TRUE)
titanic
